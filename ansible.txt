Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy and
  maintain. Automate everything from code deployment to network configuration to cloud management, in a language that
  approaches plain English, using SSH, with no agents to install on remote systems.

How Ansible solve shell problems.
    1. Ansible is declarative.

    2. Ansible support heterogeneous by default
         Ansible it's not  homogeneous, so mostly the code we have write it certain percentage of the code will run
          in other operating systems but may not be exactly, sometimes it depend.

    3. Ansible can scale to large infrastructure.
         It means we can deal with many machines with ansible by sitting in one place you can manage them. or you can
          go to the individual node and get the configuration as well.

       There are two types of configurations. Configuration that you are trying to push and trying to pull.

        1.      Configuration Management server          2.     Configuration Management server
                    ↓            ↓                                  / |           / |
             push   ↓            ↓ push                       pull  / |          /  | pull
                    ↓            ↓                                 ↓  |          ↓  |
                  Nodes        Nodes                               Nodes         Nodes

        Here Nodes may be your frontend, backend and mysql is a node and ansible can push it.

        1. Now we are having one server where ansible is installed and from that machine we can push the information
            to the nodes.

        2. We can also go to the node itself and we can pull the configuration as well and we don't need to push.

Note: Ansible support both push and pull, We need to understand what works for us better and we need to choose one or
        both according to our requirement


How Ansible is Connects to Node?
  1. Ansible uses SSH
  2. Ansible needs inventory

Now after connecting to that node how ansible is going ot manage it. because if it is shell script we hve a list of
   commands like dnf install or systemctl commands basically.
Now how ansible is managing about those particular things is, it is basically called as modules, earlier we are
   calling it as modules but after 2.9 & 2.10 they came up with some thing called as collections.

What is collection?
  A collection is a group of modules. they brought one more layer that's it, earlier we used to deal with module
    directly. but now we are dealing with collections.

How ansible Handles?
  If i want to deal with an ansible means how i do that is there is a
         Install Collection : To install the collections
         File Collection    : To create the files or copy the files something like that
         Service Collection : To manage the service
     All the above 3 collections you are going to write it in a file and that file is called as Ansible Playbook.


Ansible Playbook to be written in YAML markup language.

What is a markup language?
 It is a digital language that will help you sharing the data between the programs like html.
   Example: Bank Deposit Slip
     we have three markup languages
        1. eXtensible Markup Language(XML)
        2. Java Script Object Notation(JSON)
        3. Yet Another Markup Language(YAML)
     Ansible use YAML because it is easier to write the hole things by the way. file extension can be .yml or .yaml

YAML FILE:
   Ansible is expecting the input in YAML
   Keys(Parameters) are provided by Ansible
   Some values are also provided by Ansible

Example: sample YAMl file --> sample.yml/sample.yaml
____________________________________________________
-  name: some playbook         |                   |
   hosts: all                  |                   |
   tasks:                      |                   |
     - name: Demo Task         | ---- play 1       |
       ansible.builtin.yum:    |                   |
         name: nginx           |                   |
         state: installed      |                   | --- Playbook
                                                   |
-  name: Some role play        |                   |
   hosts: all                  | ---- play 2       |
   roles:                      |                   |
     - demo                    |                   |
_____________________________________________________
Here sample.yml is playbook and in that playbook we have 2 plays

Here - denotes the list
   sample .yml is a playbook.
   Every playbook start with a list, Meaning it can have one or more plays.
   name keyword on play is optional and it is good to have.
   hosts is must to have a keyword.
   Either task/roles is a must to have role.

Crete a instance with a name  workstation and login to the server
 1. check the available version of the ansible using below command
       sudo dnf list | grep ansible

    we have ansible.noarch as 7.2 version &
            ansible.core.x86_64 as 2.15 and core is the major we generally use

 2. Now install the ansible using the below command
        sudo yum install ansible -y
     so it installing python as a dependency tht means python is mandatory for ansible to run.

 3. Now we got n instance which is front end instance and that instance we are going to keep in a file and we are
     calling tht file as  inventory file.
         vi inv   ---- to create the inventory file and paste the private ip address of the front end instance.

    give ls and check the file is created or not and also check it has the dta in the file or not by giving cat inv(filename)

 4. Now i am not going to write a git repository but we go with shell only. i crete a sample.yml file
       vim sample.yml and provided the below data and save it

       - name: sample
         hosts: all
         tasks:
           - name: ping
             ansible.builtin.ping:

    Here ping is basically it is going to connect all these nodes nd it's going to give  ping response.

 5. Now if we give the below command it's failed because we need to give username and password
     ansible-playbook -i inv sample.yml

     ansible-playbook -i inv -e ansible_user=centos -e ansible_password=DevOps321 sample.yml
         Here inv --- is a name of the inventory file which contain front end private ip address
      now if i execute the above command it going to connect with remote node and get some response

 This is how we are going to deal with ansible.

 We have discussed that ansible inventory is optional because if you consider inventory as a file its optional,
    because if you don't give the file we can directly provide the ip address in the place of file name with comma
      if you dont give comma then it consider  it as a file.
        ansible-playbook -i 172.31.41.11, -e ansible_user=centos -e ansible_password=DevOps321 sample.yml

    suppose if you have multiple ip address you can give them here itself by providing (,)
       1st ip,2nd ip,3rd ip,etc..

Ansible Push:
Assume that we have to run a push mechanism where the yml file is in git repository.
 1. clone the repository in the shell
       git clone https://github.com/YMaheswarReddy145/learn-ansible.git

 2. Now open the learn-ansible directory
     cd learn-ansible

 3. now provide the below command
      ansible-playbook -i 172.31.41.11, -e ansible_user=centos -e ansible_password=DevOps321 sample.yml
    Now we are doing push from this

Ansible Pull:
install the ansible in the machine using below commands
    sudo yum install ansible -y

Once after installing ansible give the below command
     ansible-pull -i localhost, -U https://github.com/YMaheswarReddy145/learn-ansible.git sample.yml

     Here localhost -- we are running in the same node, it means i am running in my local system only. i don't
                       want to go and connect anywhere, i am just using my local system.
          -U  --- represent the url

Basically earlier we re cloning the repository and going in to that repository and executing the scripts but now here
 all the things will be done by b a single command and the command will take care of these. Here we are pulling to
  that node itself